
# event name is YAML dict key
hello world:
  # empty requirement for main character
  # any character that's alive and has no status will match
  main:
  # result text, uses @ to reference the shorthand name given to the main character
  text: |
    @main says "Hello World!" to a supposedly invisible camera. Thanks for the help, @main!

hello world 2:
  main:
  # empty requirement for non-main character
  # any character that's alive, has no status, and is nearby the main character will match
  other:
  text: |
    @main and @other join in chorus to say "Hello world!" to a supposedly invisible camera. Thanks for the help, guys!

long distance call:
  main:
  # this overrides the default nearby check
  # any character that's alive and has no status will match
  other: anydistance
  text: |
    @main whips out their cell phone and calls @other.
  
kill:
  # result, which comes after a semicolon in the value
  # kills the matched character if this event triggers
  main: ; kill
  text: |
    @main keels over and dies for no reason.

tag start:
  # requirement that limits this event to a total of one fire throughout the game
  # result which gives the matched character a tag, in this case "it"
  main: limittotal 1; tag it
  text: |
    A game of tag starts. @main's it!
  
tag other:
  # requirement that the main character be tagged with "it"
  # result which removes the "it" tag from the main character
  main: tag it; untag it
  # requirement which makes the matched character's relation to "main" an enemy (not on the same alliance)
  # result which adds an "it" tag to the other character
  other: enemy main; tag it
  # this text uses a tag ("they're") that gets conjugated based on the matched character
  text: |
    @main tags @other. They're@other it!

give:
  # requirement which creates an UNOWNED item with ANY tag and stores it in the shorthand name "item"
  # result which gives the main character the created item (references it using the shorthand)
  main: create item ANY; give item
  # to use the item's name, prepend the shorthand with & (and "a" if an article is necessary)
  text: |
    All of a sudden, a&item appears in front of @main. They@main pick@main it up without asking any questions.

team up:
  # result which puts "main" and "toally" on the same alliance
  # if "main" is already in an alliance, "toally" joins that even if they're in an alliance
  # otherwise, if "toally" is in an alliance, "main" joins that
  # otherwise, a new alliance is created
  main: ; ally toally
  toally: enemy main
  text: |
    @main finds @toally. Instead of fighting to the death, the two decide to form an alliance.

break up:
  # result which makes the character leave whatever alliance they are in
  main: ; leave
  # requirement which only matches characters on the same alliance as "main"
  ally: ally main
  text: |
    @main finds out that @ally likes 100 Gecs. Immediately, they@main part@main ways.

training:
  # requirement which matches only characters with an item that has the "weapon" tag and isn't secret
  # stores the matched item in "weap" for later reference
  main: item weap weapon
  text: |
    @main decides to train with their@main &weap.

eat:
  # requirement for an item with the "food" tag
  # result which removes the matched item from the character's inventory
  main: item mFood food; consume mFood
  text: |
    @main gets hungry and eats their@main &mFood.

location:
  # requirement for the matched character to be in the zone named "Center"
  # result which moves the matched character into a random zone connected to the one they're currently in
  main: in Center; move
  text: |
    @main runs away from the cornucopia.
    
goto Center:
  # result which moves the matched character into the zone named "Center"
  main: ; move Center
  text: |
    A portal just big enough for @main to fit through opens before them@main. They@main enter@main it, finding themself@main back in the center of the arena.

sparring:
  # requirement for "weapon" item
  main: item mainWeap weapon
  # requirement for ally of "main" and for "weapon" item
  ally: ally main, item allyWeap weapon
  text: |
    @main and @ally take some time to spar with each other, @main taking to their@main &mainWeap and @ally taking to their@ally &allyWeap.

armed battle:
  main: item mWeap weapon
  enemy: enemy main, item eWeap weapon
  text: |
    @main and @enemy spot each other. @main pulls out their@main &mWeap, @enemy pulls out their@enemy &eWeap, and both advance. A loud battle ensues.
